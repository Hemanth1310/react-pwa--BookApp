{"ast":null,"code":"var _jsxFileName = \"/Users/hemanth/Documents/reactpros/React-blog-master-copy/src/pages/ArticlePage.js\";\nimport React, { useState, useEffect } from 'react';\nimport CommentsList from '../components/CommentsList';\nimport UpvotesSection from '../components/UpvotesSection';\nimport articles from './article-content';\n\nconst ArticlePage = ({\n  match\n}) => {\n  const {\n    name\n  } = match.params;\n  const [articleInfo, setArticleInfo] = useState({\n    upvotes: 0,\n    comments: []\n  });\n  useEffect(() => {\n    const fetchArticleInfo = async () => {\n      const result = await fetch(`/api/articles/${name}`);\n      const body = await result.json();\n      setArticleInfo(body);\n    };\n\n    fetchArticleInfo();\n  }, [name]);\n  const matchingArticle = articles.find(article => article.name === name);\n  return matchingArticle ? React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, matchingArticle.title), React.createElement(UpvotesSection, {\n    upvotes: articleInfo.upvotes,\n    articleName: name,\n    setArticleInfo: setArticleInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), matchingArticle.content.map((paragraph, key) => React.createElement(\"p\", {\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, paragraph)), React.createElement(CommentsList, {\n    comments: articleInfo.comments,\n    articleName: name,\n    setArticleInfo: setArticleInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })) : React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Uh oh, looks like that article doesn't exist\");\n};\n\nexport default ArticlePage;","map":{"version":3,"sources":["/Users/hemanth/Documents/reactpros/React-blog-master-copy/src/pages/ArticlePage.js"],"names":["React","useState","useEffect","CommentsList","UpvotesSection","articles","ArticlePage","match","name","params","articleInfo","setArticleInfo","upvotes","comments","fetchArticleInfo","result","fetch","body","json","matchingArticle","find","article","title","content","map","paragraph","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAK,CAACE,MAAvB;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC;AAAEW,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,QAAQ,EAAE;AAAxB,GAAD,CAA9C;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,gBAAgB,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,iBAAgBR,IAAK,EAAvB,CAA1B;AACA,YAAMS,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;AACAP,MAAAA,cAAc,CAACM,IAAD,CAAd;AACH,KAJD;;AAMAH,IAAAA,gBAAgB;AACnB,GARQ,EAQN,CAACN,IAAD,CARM,CAAT;AAUA,QAAMW,eAAe,GAAGd,QAAQ,CAACe,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAACb,IAAR,KAAiBA,IAA1C,CAAxB;AACA,SAAOW,eAAe,GAElB,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,eAAe,CAACG,KAArB,CADA,EAEA,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAEZ,WAAW,CAACE,OAArC;AAA8C,IAAA,WAAW,EAAEJ,IAA3D;AAAiE,IAAA,cAAc,EAAEG,cAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGCQ,eAAe,CAACI,OAAhB,CAAwBC,GAAxB,CAA4B,CAACC,SAAD,EAAYC,GAAZ,KAAoB;AAAG,IAAA,GAAG,EAAEA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcD,SAAd,CAAhD,CAHD,EAIA,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEf,WAAW,CAACG,QAApC;AAA8C,IAAA,WAAW,EAAEL,IAA3D;AAAiE,IAAA,cAAc,EAAEG,cAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,CAFkB,GASlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDATJ;AAWH,CA3BD;;AA6BA,eAAeL,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CommentsList from '../components/CommentsList';\nimport UpvotesSection from '../components/UpvotesSection';\nimport articles from './article-content';\n\nconst ArticlePage = ({ match }) => {\n    const { name } = match.params;\n\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n    useEffect(() => {\n        const fetchArticleInfo = async () => {\n            const result = await fetch(`/api/articles/${name}`);\n            const body = await result.json();\n            setArticleInfo(body);\n        };\n\n        fetchArticleInfo();\n    }, [name]);\n\n    const matchingArticle = articles.find(article => article.name === name);\n    return matchingArticle ? \n    (\n        <>\n        <h1>{matchingArticle.title}</h1>\n        <UpvotesSection upvotes={articleInfo.upvotes} articleName={name} setArticleInfo={setArticleInfo} />\n        {matchingArticle.content.map((paragraph, key) => <p key={key}>{paragraph}</p>)}\n        <CommentsList comments={articleInfo.comments} articleName={name} setArticleInfo={setArticleInfo} />\n        </>\n    ) : (\n        <h1>Uh oh, looks like that article doesn't exist</h1>\n    );\n};\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}